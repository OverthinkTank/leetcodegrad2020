104. Maximum Depth of Binary Tree
Given a binary tree, find its maximum depth.
The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.
Note: A leaf is a node with no children.
Example:

Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7

return its depth = 3.

SOLUTION :  Recursively iterate from bottom to top adding 1 at each level.

class Solution {
    public int maxDepth(TreeNode root) {
      /*Travels all the way to the bottom of the tree*/
        if(root==null){
            return 0;
        }     
        
        
 /*    
        3(3)
        /   \
    (2)9   20(2)
        /  \
       (1)15   7(1)
       /\   /\
      NULL(0)  NULL(0)
*/

int leftDepth = maxDepth(root.left);
         System.out.println(leftDepth);
        int rightDepth = maxDepth(root.right);
         System.out.println(rightDepth);

        /*Each step from bottom to top, adds 1*/
        if(leftDepth > rightDepth){
            return leftDepth+1;
        }
        
        return rightDepth + 1;
    }
}
