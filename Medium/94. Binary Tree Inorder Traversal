94. Binary Tree Inorder Traversal 

Given the root of a binary tree, return the inorder traversal of its nodes' values.

Example 1:
Input: root = [1,null,2,3]
Output: [1,3,2]

SOLUTION: **https://www.youtube.com/watch?v=5y_j0OqD7v8&list=PLEJXowNB4kPzqcnf9CnjEcgP7r5LaSijB&index=2**

class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        /* VISUALIZE--> 
                 
                  1
                 / \
                2   3
               / \
              4   5
              
    Current: 1 | 2 | 4 | NULL(left of 4) | NULL(right of 4) | (back to 2)5 |  NULL | NULL | (back to 1)3 | NULL | NULL && stk.isEmpty()     
        */
        
        List<Integer> result = new ArrayList<>();
        Stack<TreeNode> stk = new Stack<>();
        TreeNode current = root;
        
        /*BREAK condition when stack is empty AND current == NULL*/
        while(current!=null || !stk.isEmpty()){
        
            while(current!=null){
                stk.push(current);
                current = current.left; //stk--> 1|2|4
            }
            
            /* when current becomes null*/
            current = stk.pop();
            
            //Add | Print popped element
            result.add(current.val);
            
            //Assign right child of current as current
            current = current.right;

        }
        
        return result;
    }
}
