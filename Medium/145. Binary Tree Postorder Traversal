145. Binary Tree Postorder Traversal
Given the root of a binary tree, return the postorder traversal of its nodes' values.
Example 1:
Input: root = [1,null,2,3]
Output: [3,2,1]


SOLUTION: **LEARN AGAIN**

class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
    
        /*Using 2 stacks --> Here we use POPPED element to traverse*/
        Stack<TreeNode> stk1 = new Stack<>();
        Stack<Integer> stk2 = new Stack<>();
        List<Integer> result = new ArrayList<>();
        
        if(root==null){
            return result;
        }
        
        stk1.push(root);
        while(!stk1.isEmpty()){
            //IMP. PART
            TreeNode temp = stk1.pop();
            stk2.push(temp.val);
            
            if(temp.left!=null){
                stk1.push(temp.left);
            }
            
             if(temp.right!=null){
                stk1.push(temp.right);
            }
        }
       
        /*Reversing stack2 Elements to be added in list*/
        while(!stk2.isEmpty()){
            result.add(stk2.pop());
        }
        return result;
    }
}
