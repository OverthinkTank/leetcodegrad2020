86. Partition List
Given a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.

You should preserve the original relative order of the nodes in each of the two partitions.

Example:

Input: head = 1->4->3->2->5->2, x = 3
Output: 1->2->2->4->3->5

SOLUTION:

/*CREATE TWO SEPERATE LISTS(L1<=x && L2>x) AND MERGE THEM LATER*/
class Solution {
    public ListNode partition(ListNode head, int x) {
        /* Using prevItr and afterItr(2-pointer technique) */
        
        
        /* To create list of values<=x -> Initializing small list with new node*/
        ListNode prevItr = new ListNode();
        ListNode prevHead = prevItr;
        
        /* To create list of values greater than x -> Initializing large list with new node*/
        ListNode afterItr = new ListNode();
        ListNode afterHead = afterItr;
        
        /*Main pointer to iterate original list*/
        ListNode curr = head;
        
        while(curr!=null){
            if(curr.val <  x){
                prevItr.next = curr;
                prevItr = prevItr.next;
            }else{
                afterItr.next = curr;
                afterItr = afterItr.next;
            }
            curr = curr.next;
        }    
        /*At this point we have two seperate list */
    
        /*BREAK Condition : We terminate larger list with null*/
        afterItr.next = null;
        
        /*JOIN small and large list*/
        prevItr.next = afterHead.next;
        
        return prevHead.next;
    }
}

