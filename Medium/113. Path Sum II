113. Path Sum II
Given a binary tree and a sum, find all root-to-leaf paths where each path's sum equals the given sum.
Note: A leaf is a node with no children.
Example:
Given the below binary tree and sum = 22,

      5
     / \
    4   8
   /   / \
  11  13  4
 /  \    / \
7    2  5   1
Return:

[
   [5,4,11,2],
   [5,8,4,5]
]


SOLUTION : Using Recursion HINT: helper function with (sum-root.val) recursive calls on left and right OR Iterative solution using STACK.

class Solution {
    public List<List<Integer>> pathSum(TreeNode root, int sum) {
        List<Integer> lst1 = new ArrayList<>();
        List<List<Integer>> result = new ArrayList<List<Integer>>();

        helper(root, sum, lst1, result);
        return result;
    }
    
    
    public void helper(TreeNode root, int sum, List<Integer> lst1, List<List<Integer>> result){
        if(root==null) {
            return;
        }
        
        lst1.add(root.val);
        if(root.left==null && root.right==null && sum==root.val){
                result.add(new ArrayList<>(lst1));
        }
        
        // if(root.left!=null){
            helper(root.left, sum - root.val , lst1, result);
            // lst1.remove(lst1.size()-1);
        // }
        
        
        // if(root.right!=null){
            helper(root.right, sum - root.val , lst1, result);
        
            lst1.remove(lst1.size()-1);
        // }
    }
}
